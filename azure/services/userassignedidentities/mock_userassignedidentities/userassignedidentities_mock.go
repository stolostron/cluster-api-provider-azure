// Code generated by MockGen. DO NOT EDIT.
// Source: sigs.k8s.io/cluster-api-provider-azure/azure/services/userassignedidentities (interfaces: UserAssignedIdentityScope)
//
// Generated by this command:
//
//	mockgen -destination mock_userassignedidentities/userassignedidentities_mock.go -package mock_userassignedidentities . UserAssignedIdentityScope
//

// Package mock_userassignedidentities is a generated GoMock package.
package mock_userassignedidentities

import (
	reflect "reflect"
	time "time"

	v1api20230131 "github.com/Azure/azure-service-operator/v2/api/managedidentity/v1api20230131"
	gomock "go.uber.org/mock/gomock"
	v1beta1 "sigs.k8s.io/cluster-api-provider-azure/api/v1beta1"
	azure "sigs.k8s.io/cluster-api-provider-azure/azure"
	v1beta10 "sigs.k8s.io/cluster-api/api/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockUserAssignedIdentityScope is a mock of UserAssignedIdentityScope interface.
type MockUserAssignedIdentityScope struct {
	ctrl     *gomock.Controller
	recorder *MockUserAssignedIdentityScopeMockRecorder
	isgomock struct{}
}

// MockUserAssignedIdentityScopeMockRecorder is the mock recorder for MockUserAssignedIdentityScope.
type MockUserAssignedIdentityScopeMockRecorder struct {
	mock *MockUserAssignedIdentityScope
}

// NewMockUserAssignedIdentityScope creates a new mock instance.
func NewMockUserAssignedIdentityScope(ctrl *gomock.Controller) *MockUserAssignedIdentityScope {
	mock := &MockUserAssignedIdentityScope{ctrl: ctrl}
	mock.recorder = &MockUserAssignedIdentityScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserAssignedIdentityScope) EXPECT() *MockUserAssignedIdentityScopeMockRecorder {
	return m.recorder
}

// ASOOwner mocks base method.
func (m *MockUserAssignedIdentityScope) ASOOwner() client.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ASOOwner")
	ret0, _ := ret[0].(client.Object)
	return ret0
}

// ASOOwner indicates an expected call of ASOOwner.
func (mr *MockUserAssignedIdentityScopeMockRecorder) ASOOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ASOOwner", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).ASOOwner))
}

// ClusterName mocks base method.
func (m *MockUserAssignedIdentityScope) ClusterName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterName indicates an expected call of ClusterName.
func (mr *MockUserAssignedIdentityScopeMockRecorder) ClusterName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterName", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).ClusterName))
}

// DefaultedAzureCallTimeout mocks base method.
func (m *MockUserAssignedIdentityScope) DefaultedAzureCallTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultedAzureCallTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// DefaultedAzureCallTimeout indicates an expected call of DefaultedAzureCallTimeout.
func (mr *MockUserAssignedIdentityScopeMockRecorder) DefaultedAzureCallTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultedAzureCallTimeout", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).DefaultedAzureCallTimeout))
}

// DefaultedAzureServiceReconcileTimeout mocks base method.
func (m *MockUserAssignedIdentityScope) DefaultedAzureServiceReconcileTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultedAzureServiceReconcileTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// DefaultedAzureServiceReconcileTimeout indicates an expected call of DefaultedAzureServiceReconcileTimeout.
func (mr *MockUserAssignedIdentityScopeMockRecorder) DefaultedAzureServiceReconcileTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultedAzureServiceReconcileTimeout", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).DefaultedAzureServiceReconcileTimeout))
}

// DefaultedReconcilerRequeue mocks base method.
func (m *MockUserAssignedIdentityScope) DefaultedReconcilerRequeue() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultedReconcilerRequeue")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// DefaultedReconcilerRequeue indicates an expected call of DefaultedReconcilerRequeue.
func (mr *MockUserAssignedIdentityScopeMockRecorder) DefaultedReconcilerRequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultedReconcilerRequeue", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).DefaultedReconcilerRequeue))
}

// DeleteLongRunningOperationState mocks base method.
func (m *MockUserAssignedIdentityScope) DeleteLongRunningOperationState(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteLongRunningOperationState", arg0, arg1, arg2)
}

// DeleteLongRunningOperationState indicates an expected call of DeleteLongRunningOperationState.
func (mr *MockUserAssignedIdentityScopeMockRecorder) DeleteLongRunningOperationState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLongRunningOperationState", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).DeleteLongRunningOperationState), arg0, arg1, arg2)
}

// GetClient mocks base method.
func (m *MockUserAssignedIdentityScope) GetClient() client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(client.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockUserAssignedIdentityScopeMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).GetClient))
}

// GetLongRunningOperationState mocks base method.
func (m *MockUserAssignedIdentityScope) GetLongRunningOperationState(arg0, arg1, arg2 string) *v1beta1.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongRunningOperationState", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1beta1.Future)
	return ret0
}

// GetLongRunningOperationState indicates an expected call of GetLongRunningOperationState.
func (mr *MockUserAssignedIdentityScopeMockRecorder) GetLongRunningOperationState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongRunningOperationState", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).GetLongRunningOperationState), arg0, arg1, arg2)
}

// SetLongRunningOperationState mocks base method.
func (m *MockUserAssignedIdentityScope) SetLongRunningOperationState(arg0 *v1beta1.Future) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLongRunningOperationState", arg0)
}

// SetLongRunningOperationState indicates an expected call of SetLongRunningOperationState.
func (mr *MockUserAssignedIdentityScopeMockRecorder) SetLongRunningOperationState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLongRunningOperationState", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).SetLongRunningOperationState), arg0)
}

// UpdateDeleteStatus mocks base method.
func (m *MockUserAssignedIdentityScope) UpdateDeleteStatus(arg0 v1beta10.ConditionType, arg1 string, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateDeleteStatus", arg0, arg1, arg2)
}

// UpdateDeleteStatus indicates an expected call of UpdateDeleteStatus.
func (mr *MockUserAssignedIdentityScopeMockRecorder) UpdateDeleteStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeleteStatus", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).UpdateDeleteStatus), arg0, arg1, arg2)
}

// UpdatePatchStatus mocks base method.
func (m *MockUserAssignedIdentityScope) UpdatePatchStatus(arg0 v1beta10.ConditionType, arg1 string, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePatchStatus", arg0, arg1, arg2)
}

// UpdatePatchStatus indicates an expected call of UpdatePatchStatus.
func (mr *MockUserAssignedIdentityScopeMockRecorder) UpdatePatchStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatchStatus", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).UpdatePatchStatus), arg0, arg1, arg2)
}

// UpdatePutStatus mocks base method.
func (m *MockUserAssignedIdentityScope) UpdatePutStatus(arg0 v1beta10.ConditionType, arg1 string, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePutStatus", arg0, arg1, arg2)
}

// UpdatePutStatus indicates an expected call of UpdatePutStatus.
func (mr *MockUserAssignedIdentityScopeMockRecorder) UpdatePutStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePutStatus", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).UpdatePutStatus), arg0, arg1, arg2)
}

// UserAssignedIdentitySpecs mocks base method.
func (m *MockUserAssignedIdentityScope) UserAssignedIdentitySpecs() []azure.ASOResourceSpecGetter[*v1api20230131.UserAssignedIdentity] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserAssignedIdentitySpecs")
	ret0, _ := ret[0].([]azure.ASOResourceSpecGetter[*v1api20230131.UserAssignedIdentity])
	return ret0
}

// UserAssignedIdentitySpecs indicates an expected call of UserAssignedIdentitySpecs.
func (mr *MockUserAssignedIdentityScopeMockRecorder) UserAssignedIdentitySpecs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserAssignedIdentitySpecs", reflect.TypeOf((*MockUserAssignedIdentityScope)(nil).UserAssignedIdentitySpecs))
}
