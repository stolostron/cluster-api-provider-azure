/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: roleassignmentsaso.go
//
// Generated by this command:
//
//	mockgen -destination roleassignmentsaso_mock.go -package roleassignmentsaso -source client.go -source roleassignmentsaso.go
//

// Package roleassignmentsaso is a generated GoMock package.
package roleassignmentsaso

import (
	reflect "reflect"
	time "time"

	v1api20220401 "github.com/Azure/azure-service-operator/v2/api/authorization/v1api20220401"
	gomock "go.uber.org/mock/gomock"
	v1beta1 "sigs.k8s.io/cluster-api-provider-azure/api/v1beta1"
	azure "sigs.k8s.io/cluster-api-provider-azure/azure"
	v1beta10 "sigs.k8s.io/cluster-api/api/v1beta1"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockKubernetesRoleAssignmentScope is a mock of KubernetesRoleAssignmentScope interface.
type MockKubernetesRoleAssignmentScope struct {
	ctrl     *gomock.Controller
	recorder *MockKubernetesRoleAssignmentScopeMockRecorder
	isgomock struct{}
}

// MockKubernetesRoleAssignmentScopeMockRecorder is the mock recorder for MockKubernetesRoleAssignmentScope.
type MockKubernetesRoleAssignmentScopeMockRecorder struct {
	mock *MockKubernetesRoleAssignmentScope
}

// NewMockKubernetesRoleAssignmentScope creates a new mock instance.
func NewMockKubernetesRoleAssignmentScope(ctrl *gomock.Controller) *MockKubernetesRoleAssignmentScope {
	mock := &MockKubernetesRoleAssignmentScope{ctrl: ctrl}
	mock.recorder = &MockKubernetesRoleAssignmentScopeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKubernetesRoleAssignmentScope) EXPECT() *MockKubernetesRoleAssignmentScopeMockRecorder {
	return m.recorder
}

// ASOOwner mocks base method.
func (m *MockKubernetesRoleAssignmentScope) ASOOwner() client.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ASOOwner")
	ret0, _ := ret[0].(client.Object)
	return ret0
}

// ASOOwner indicates an expected call of ASOOwner.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) ASOOwner() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ASOOwner", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).ASOOwner))
}

// ClusterName mocks base method.
func (m *MockKubernetesRoleAssignmentScope) ClusterName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClusterName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ClusterName indicates an expected call of ClusterName.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) ClusterName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClusterName", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).ClusterName))
}

// DefaultedAzureCallTimeout mocks base method.
func (m *MockKubernetesRoleAssignmentScope) DefaultedAzureCallTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultedAzureCallTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// DefaultedAzureCallTimeout indicates an expected call of DefaultedAzureCallTimeout.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) DefaultedAzureCallTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultedAzureCallTimeout", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).DefaultedAzureCallTimeout))
}

// DefaultedAzureServiceReconcileTimeout mocks base method.
func (m *MockKubernetesRoleAssignmentScope) DefaultedAzureServiceReconcileTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultedAzureServiceReconcileTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// DefaultedAzureServiceReconcileTimeout indicates an expected call of DefaultedAzureServiceReconcileTimeout.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) DefaultedAzureServiceReconcileTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultedAzureServiceReconcileTimeout", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).DefaultedAzureServiceReconcileTimeout))
}

// DefaultedReconcilerRequeue mocks base method.
func (m *MockKubernetesRoleAssignmentScope) DefaultedReconcilerRequeue() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DefaultedReconcilerRequeue")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// DefaultedReconcilerRequeue indicates an expected call of DefaultedReconcilerRequeue.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) DefaultedReconcilerRequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DefaultedReconcilerRequeue", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).DefaultedReconcilerRequeue))
}

// DeleteLongRunningOperationState mocks base method.
func (m *MockKubernetesRoleAssignmentScope) DeleteLongRunningOperationState(arg0, arg1, arg2 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DeleteLongRunningOperationState", arg0, arg1, arg2)
}

// DeleteLongRunningOperationState indicates an expected call of DeleteLongRunningOperationState.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) DeleteLongRunningOperationState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteLongRunningOperationState", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).DeleteLongRunningOperationState), arg0, arg1, arg2)
}

// GetClient mocks base method.
func (m *MockKubernetesRoleAssignmentScope) GetClient() client.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(client.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).GetClient))
}

// GetLongRunningOperationState mocks base method.
func (m *MockKubernetesRoleAssignmentScope) GetLongRunningOperationState(arg0, arg1, arg2 string) *v1beta1.Future {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongRunningOperationState", arg0, arg1, arg2)
	ret0, _ := ret[0].(*v1beta1.Future)
	return ret0
}

// GetLongRunningOperationState indicates an expected call of GetLongRunningOperationState.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) GetLongRunningOperationState(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongRunningOperationState", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).GetLongRunningOperationState), arg0, arg1, arg2)
}

// KubernetesRoleAssignmentSpecs mocks base method.
func (m *MockKubernetesRoleAssignmentScope) KubernetesRoleAssignmentSpecs() []azure.ASOResourceSpecGetter[*v1api20220401.RoleAssignment] {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KubernetesRoleAssignmentSpecs")
	ret0, _ := ret[0].([]azure.ASOResourceSpecGetter[*v1api20220401.RoleAssignment])
	return ret0
}

// KubernetesRoleAssignmentSpecs indicates an expected call of KubernetesRoleAssignmentSpecs.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) KubernetesRoleAssignmentSpecs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KubernetesRoleAssignmentSpecs", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).KubernetesRoleAssignmentSpecs))
}

// SetLongRunningOperationState mocks base method.
func (m *MockKubernetesRoleAssignmentScope) SetLongRunningOperationState(arg0 *v1beta1.Future) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetLongRunningOperationState", arg0)
}

// SetLongRunningOperationState indicates an expected call of SetLongRunningOperationState.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) SetLongRunningOperationState(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetLongRunningOperationState", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).SetLongRunningOperationState), arg0)
}

// UpdateDeleteStatus mocks base method.
func (m *MockKubernetesRoleAssignmentScope) UpdateDeleteStatus(arg0 v1beta10.ConditionType, arg1 string, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateDeleteStatus", arg0, arg1, arg2)
}

// UpdateDeleteStatus indicates an expected call of UpdateDeleteStatus.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) UpdateDeleteStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeleteStatus", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).UpdateDeleteStatus), arg0, arg1, arg2)
}

// UpdatePatchStatus mocks base method.
func (m *MockKubernetesRoleAssignmentScope) UpdatePatchStatus(arg0 v1beta10.ConditionType, arg1 string, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePatchStatus", arg0, arg1, arg2)
}

// UpdatePatchStatus indicates an expected call of UpdatePatchStatus.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) UpdatePatchStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatchStatus", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).UpdatePatchStatus), arg0, arg1, arg2)
}

// UpdatePutStatus mocks base method.
func (m *MockKubernetesRoleAssignmentScope) UpdatePutStatus(arg0 v1beta10.ConditionType, arg1 string, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdatePutStatus", arg0, arg1, arg2)
}

// UpdatePutStatus indicates an expected call of UpdatePutStatus.
func (mr *MockKubernetesRoleAssignmentScopeMockRecorder) UpdatePutStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePutStatus", reflect.TypeOf((*MockKubernetesRoleAssignmentScope)(nil).UpdatePutStatus), arg0, arg1, arg2)
}
